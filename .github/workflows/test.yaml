name: test
on: [push, workflow_dispatch]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Silice
        shell: bash
        run: |
          echo "downloading ..."
          wget -c https://github.com/sylefeb/silice-for-github/releases/download/bucket-linux-x64/release.tgz
          echo "decompressing ..."
          tar xvfz release.tgz
          echo "installing ..."
          echo "(mkdir)"
          sudo mkdir -p /usr/local/share/
          echo "(mv silice)"
          sudo mv release/silice /usr/local/share/
          ls -la /usr/local/share/silice
          echo "(mv bins)"
          sudo mv release/bin/* /usr/bin/
          echo "path setup ..."
          echo '/usr/local/share/silice/oss-cad-suite/bin/' >>"${GITHUB_PATH}"
          echo '/usr/local/share/silice/oss-cad-suite/lib/' >>"${GITHUB_PATH}"
          echo '/usr/local/share/silice/oss-cad-suite/share/verilator/bin/' >>"${GITHUB_PATH}"
          echo "QT_PLUGIN_PATH=/usr/local/share/silice/oss-cad-suite/lib/qt5/plugins" >> $GITHUB_ENV
          echo "GTK_EXE_PREFIX=/usr/local/share/silice/oss-cad-suite/" >> $GITHUB_ENV
          echo "GTK_DATA_PREFIX=/usr/local/share/silice/oss-cad-suite/" >> $GITHUB_ENV
          echo "GDK_PIXBUF_MODULEDIR=/usr/local/share/silice/oss-cad-suite/lib/gdk-pixbuf-2.0/2.10.0/loaders" >> $GITHUB_ENV
          echo "GDK_PIXBUF_MODULE_FILE=/usr/local/share/silice/oss-cad-suite/lib/gdk-pixbuf-2.0/2.10.0/loaders.cache" >> $GITHUB_ENV
          echo "OPENFPGALOADER_SOJ_DIR=/usr/local/share/silice/oss-cad-suite/share/openFPGALoader" >> $GITHUB_ENV
          echo "done."
          pip3 install termcolor
          pip3 install edalize

      - name: Build project
        shell: bash
        working-directory: ./src/silice
        run : |
          make tinytapeout

      - name: Install iverilog
        shell: bash
        run: sudo apt-get update && sudo apt-get install -y iverilog

      # Set Python up and install cocotb
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python packages
        shell: bash
        run: pip install -r test/requirements.txt

      - name: Run tests
        run: |
          cd test
          make clean
          make
          # make will return success even if the test fails, so check for failure in the results.xml
          ! grep failure results.xml

      - name: Test Summary
        uses: test-summary/action@v2.3
        with:
          paths: "test/results.xml"
        if: always()

      - name: upload vcd
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-vcd
          path: |
            test/tb.vcd
            test/results.xml
